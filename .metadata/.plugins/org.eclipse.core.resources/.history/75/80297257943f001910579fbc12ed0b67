/*
 * bootloaderCommands.c
 *
 *  Created on: 5 Mar 2019
 *      Author: emirs
 */


#include "bootloaderCommands.h"

uint8_t blRxBuffer[BL_RX_LEN];


bool isUserButtonPushed(void)
{
	if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
	{
		printMsg("Note: User Button has been pushed\r\n"
				"Executing BootLoader Mode");
		return true;
	}
	else
	{
		printMsg("Note: User Button has not been pushed\r\n"
						"Executing normal application");
		return false;
	}
}

/*****************************************************************************************
 * Brief: Function to jump yo user application
 * Arguments: none
 * Returns: none
 * Assuming the FLASH_SECTOR2_BASE_ADDRESS is where the
 * user application is stored
 *****************************************************************************************/
void bootLoaderJumpToUserApp (void)
{
	/*define a function pointer to hold the adress of the RESET Handler of the user app.*/
	void (*appResetHandler) (void);
	printMsg("BL_DEBUG_MSG: bootLoaderJumpToUserApp \r\n");

	/*configure the MSP by  reading the value from the base address of sector 2 0x0800-8000
	 * 0x0800-8000 adress holds the Main stack pointer
	 * Assume the FLASH_SECTOR2_BASE_ADDRESS is the adress where user application is stored*/
	uint32_t mspValue = *(volatile uint32_t *) FLASH_SECTOR2_BASE_ADDRESS;						//type cast a 32bit unsigned integer and dereference the pinter to get address contents
	printMsg("BL_DEBUG_MSG: MSP value = %#x\r\n", mspValue);

	/*cmsis function to set the Main Stack Pointer Value*/
	__set_MSP(mspValue);

	//SCB->VTOR = FLASH_SECTOR1_BASE_ADDRESS;

	/*Now we fetch the RESET HANDLER ADDRESS of the User APLICATION
	 * from the location FLASH_SECTOR2_BASE_ADDRESS+4*/
	uint32_t resetHandlerAddress = *(volatile uint32_t *) (FLASH_SECTOR2_BASE_ADDRESS + 4);		//type cast a 32bit unsigned integer and dereference the pinter to get address contents

	/*initializee a function pointer with reset handler address from FLASH_SECTOR2_BASE_ADDRESS + 4*/
	appResetHandler = (void *) resetHandlerAddress;

	printMsg("BL_DEBUG_MSG: appResetHandler address = %#x\r\n");
	/*jump to reset handler of the application, user application will now take control of the functionality
	 * the reset handler address wis then put into the PC (Program counter) and the code will be executed from this address */
	appResetHandler();																			//jump to the initialized address of the reset handler

	/*Note: the reset handler of the the application can be found in the start up .s file in this case "startup_stm32l476xx.s line 78
	 * from the reset handler the CopyDataInit , LoopCopyDataInit, FillZerobss, LoopFillZerobss are called
	 * in LoopFillZerobss SystemInit is called, here the vector table is shifted/relocated using the SCB->VTOR
	 * The FLASH_BASE is  is by default 0x0800-0000, we should not chnage this, but we can change the VECT_TAB_OFFSET which is by default 0x00
	 * the VECT_TAB_OFFSET must be a multiple of 0x200 as stated by STM32, the VECT_TAB_OFFSET should be set to 0x8000
	 *
	 * SystemInit can be found in system_stm32l4xx.c*/

}

/******************************************************************************
 * Brief: The function in which the bootloader reads Ccommands sent by the host
 * Arguments: none
 * Returns: none
 * *****************************************************************************/
void bootloaderUARTreadData (void)
{

}

void debugUART2init (void)
{
	uint8_t receiveLenght = 0;
	while(1)
	{
		memset(blRxBuffer,0,200);
		/*Here we will read and decode the commands from the host*/
		/*First read only one byte from the host, which is the Lenght byte*/
		HAL_UART_Receive(C_UART, blRxBuffer, SINGLE_BYTE, HAL_MAX_DELAY);
		receiveLenght = blRxBuffer[0];
		/*Next we will use the receiveLenght from the first variable to receive the rest of the bytes*/
		HAL_UART_Receive(C_UART, &blRxBuffer[1], receiveLenght, HAL_MAX_DELAY);
		switch(blRxBuffer[1])
		{

		}






	}
}
